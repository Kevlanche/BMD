package com.kevlanche.beaversmustdie;

import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.BodyDef.BodyType;
import com.badlogic.gdx.physics.box2d.CircleShape;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;

public class Island extends PhysicsActor {

	public Island(World world, float angleDegrees) {

		BodyDef bd = new BodyDef();
		bd.type = BodyType.StaticBody;
		bd.position.set( MathUtils.cosDeg(angleDegrees)*Water.WATER_RADIUS, MathUtils.sinDeg(angleDegrees)*Water.WATER_RADIUS);
		bd.angle = MathUtils.radiansToDegrees * angleDegrees;
		
		Body body = world.createBody(bd);
		
		FixtureDef fd = new FixtureDef();
		fd.density = 0.0f;
		fd.filter.categoryBits = Collision.ISLAND;
		fd.filter.maskBits = Collision.SHARK | Collision.ISLAND;
		
		fd.restitution = 0.0f;
		fd.friction = 0.0f;
		
		
		PolygonShape ps = new PolygonShape();
		float s = 1.0f; //scale
		ps.set(new float[]{
			0.0f, 0.5f*s,
			0.2f*s, 0.0f,
			0.8f*s, 0.0f,
			1.0f*s, 0.5f*s,
			0.8f*s, 1.0f*s,
			0.2f*s, 1.0f*s
		});
		fd.shape = ps;
		
		body.createFixture(fd);
		
		ps.dispose();
		
		super.initPhysicsBody(body);
		
		setSize(4*s*Mane.PTM_RATIO, s*Mane.PTM_RATIO);
		
	}
	

	@Override
	public void draw(SpriteBatch batch, float parentAlpha) {
		super.draw(batch, parentAlpha, Assets.island);
	}
}
